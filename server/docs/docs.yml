swagger: "2.0"
info:
  description: 'Banka is a light-weight core banking application that powers banking operations like account creation, customer deposit and withdrawals.'
  version: "1.0.0"
  title: "Banka Application API"
host: "this-banka.herokuapp.com"
basePath: "/api/v1"


securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"

tags:
- name: 'Users'
  description: 'Operations to be carried out only by the users'
- name: 'Admin'
  description: "Operations to be carried out only by Admin"
- name: 'Admin/Staff'
  description: 'Operations to be carried out only by the Admin/Staff'
- name: 'Staff (Cashier)'
  description: "Operations to be carried out only by the Staff (Cashier)"

schemes: 
  - "https"

paths:
  /auth/signup:
    post:
      tags:
      - "Users"
      summary: "Handles the creation of new user"
      description: "This endpoint creates a new user and persist input data to the database"
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "This is the request body object containing users' signup information"
        required: true
        schema: 
          $ref: "#/definitions/UserSignupRequest"
      responses:
        201:
          description: "User has been successfully resgistered"
        400:
          description: "Bad Request"
        409: 
          description: "Email has been used by another user"
        500: 
          description: "Internal Server Error"
  
  /auth/signin:
    post:
      tags:
      - "Users"
      - "Admin"
      summary: "Handles users' sign in into the application"
      description: "This endpoint sign in users afer authentications"
      consumes:
      - "application/json"
      produces: 
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "This is the request body object containing users' sign in information"
        required: true
        schema: 
          $ref: "#/definitions/UserLoginRequest"
      responses:
        200:
          description: "General Success"
        400:
          description: "Bad Request"
        401:
          description: 'User has entered incorrect details'
        404: 
          description: "User Not Found"
        500: 
          description: "Internal Server Error"
          
  /accounts:
    post:
      tags:
      - "Users"
      summary: "Handles users' bank acccount creation"
      description: "This endpoint creates users' bank accounts"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "This is trshe request body object containing account type information"
        items:
          type: "string"
          enum:
          - "savings"
          - "current"
        schema: 
          $ref: "#/definitions/createAccountRequest"
      responses:
        201:
          description: "Returns created entity"
        401:
          description: "Authentication Error"
        500: 
          description: "Internal Server Error"


 
  /myaccounts:
    get:
      tags:
      - 'Users'
      summary: "User can View list of hs/her accounts"
      description: "Returns list of all accounts from the database"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters: []
      responses:
        200:
          description: "successful Operation"
        404:
          description: "Account Not Found"
        401:
          description: "Authentication Error"
        500: 
            description: "Internal Server Error"
          
  /accounts/{accountNumber}/transactions:
    get:
      tags: 
      - "Users"
      summary: "View Accounts Transaction History"
      description: "Returns transaction history of an account"
      consumes:
      - "application/json"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - in: "path"
        name: "accountNumber"
        type: "integer"
        required: true
        description: "Transactions for a specific Account number"
      responses:
        200:
          description: "successful operation"
        401:
          description: "Authentication Error"
        404: 
          description: "No transaction found for the account"
        500:
          description: "Internal Server Error"

  /transactions/{transactionId}:
    get:
      tags:
      - "Users"
      summary: "View Specific Transactions"
      description: "Returns specific transaction details by id"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - in: "path"
        name: "transactionId"
        type: "integer"
        required: true
        description: "transactionId to return"
      responses:
        200:
          description: "successful operation"
        404: 
          description: "No transaction found for the given id"
        500:
          description:  "Internal Server Error"

  /accounts/{accountNumber}: 
    get:
      tags:
      - "Users"
      summary: "View Specific Account Details"
      description: "Returns Account Details"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - in: "path"
        name: "accountNumber"
        type: "integer"
        required: true
        description: "Get Account Details by Accont Number"
      responses:
        200:
          description: "successful operation"
        401:
          description: "Authentication Error"
        404:
          description: "Not Found"
        500:
          description: "Internal Server Error"


# Admin/staff
  /user/{emailAddress}/accounts:
      get:
        tags:
        - "Admin/Staff"
        summary: "View all accounts owned by a specific user (client)"
        description: "Returns all users' accounts"
        produces: 
        - "application/json"
        security:
        - Bearer: []
        parameters:
        - in: "path"
          name: "emailAddress"
          type: "string"
          required: true
          description: "Email Address to return"
        responses:
          200:
            description: "successful operation"
          404: 
            description: "No accounts found for the email address"
          500:
            description:  "Internal Server Error"
            
  /accounts/:
    get:
      tags:
      - 'Admin/Staff'
      summary: "View list of all  accounts"
      description: "Returns list of all accounts in the database"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      responses:
        200:
          description: "successful Operation"
        404:
          description: "Account Not Found"
        401:
          description: "Authentication Error"
        500: 
          description: "Internal Server Error"
  #Query
  /accounts?:
    get:
      tags:
      - 'Admin/Staff'
      summary: "View filtered list of accounts"
      description: "Returns filtered (active or dormant) list of all accounts in the database"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - in: "query"
        name: "status"
        required: true
        type: "array"
        description: "Filter accounts by status values"
        items:
          type: "string"
          enum:
          - "active"
          - "dormant"
          default: "active"
        # collectionFormat: "multi"
      responses:
        200:
          description: "successful Operation"
        401:
          description: "Authentication Error"
        404:
          description: "Account Not Found"
        500: 
          description: "Internal Server Error"      

  /account/{accountNumber}:
    patch:
      tags:
      - "Admin/Staff"
      summary: "Handles Account Status Update"
      description: "This endpoint updates users' bank accounts status. This can only be done by an admin"
      consumes:
      - "application/json"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - name: "accountNumber"
        in: "path"
        type: "string"
        description: "Account Number to activate or deactivate"
        required: true
      - in: "body"
        name: "body"
        description: "This is the request body object containing status type"
        required: true
        items:
          type: "string"
          enum:
          - "active"
          - "dormant"
          default: "0"
        schema: 
          $ref: "#/definitions/updateAccountStatus"
      responses:
        200:
          description: "General Success"
        404: 
          description: "Account not found in the database"
        409: 
          description: "Account status is same as new status"
        500:
         description: "Internal Server Error"

    delete:
      tags:
      - "Admin/Staff"
      summary: "Handles Specific Account Deletion"
      description: "This endpoint deletes a specific bank account. This can only be done by an admin/Staff"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - name: "accountNumber"
        in: "path"
        type: "string"
        description: "Account Number to delete"
        required: true
      responses:
        200:
          description: "General Success"
        401:
          description: "Authentication Error"
        404: 
          description: "Acccount number does not exist"
        500:
          description: "Internal Server Error"
  
  #Cashier    
  /transactions/{accountNumber}/debit:
    post:
      tags:
      - "Staff (Cashier)"
      summary: "Debit Bank Account"
      description: "This endpoint Performs debit transaction on a specific account"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - in: "path"
        name: "accountNumber"
        type: "integer"
        required: true
        description: "Account number to debit"
      - in: "body"
        name: "body"
        required: true
        description: "Amout to debit"
        schema: 
          $ref: "#/definitions/debitAccount"
      responses:
        201:
          description: "Account has been successfully credited"
        401:
          description: "Authentication Error"
        400: 
          description: "Not Allowed"
        404: 
          description: "Account not found in the database"
        500:
          description: "Internal server error"
        
  /transactions/{accountNumber}/credit:
    post:
      tags:
      - "Staff (Cashier)"
      summary: "Credit Bank Account"
      description: "This endpoint Performs credit transaction on a specific account"
      consumes:
      - "application/json"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - in: "path"
        name: "accountNumber"
        type: "integer"
        required: true
        description: "Account number to credit"
      - in: "body"
        name: "body"
        required: true
        description: "Amout to credit"
        schema: 
          $ref: "#/definitions/creditAccount"
      responses:
        201:
          description: "Account has been successfully credited"
        401:
          description: "Authentication Error"
        400: 
          description: "Not Allowed"
        404: 
          description: "Account not found in the database"
        500:
          description: "Internal server error"

  /createrole:
    post:
      tags:
      - "Admin"
      summary: "Handles the creation of new admin user"
      description: "This endpoint creates a new admin user and persist input data to the database"
      consumes:
      - "application/json"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - in: "body"
        name: "body"
        description: "This is the request body object containing admin/staff create role information. In other to create admin/staff, Sign in with  Email: 'admin@banka.com', 
        Password: 'BankaAdmin2019'  Deafult password for new admin/staff is 'Banka007'" 
        items:
          type: "string"
          enum:
          - "0 - Staff role"
          - "1 - Admin role"
          default: "0"
        required: true
        schema: 
          $ref: "#/definitions/createUsersRole"
      responses:
        201:
          description: "User has been successfully resgistered"
        400:
          description: "Bad Request"
        409: 
          description: "Email has been used by another user"
        500: 
          description: "Internal Server Error"

  /auth/reset:
    patch:
      tags:
      summary: "Handles Password Reset"
      description: "This endpoint update user's password to the new one"
      produces: 
      - "application/json"
      security:
      - Bearer: []
      parameters:
      - in: "body"
        name: "body"
        description: "This is the request body object containing the old password field and the new one"
        required: true
        schema: 
          $ref: "#/definitions/resetPassword"
      responses:
        200:
          description: "General Success"
        404: 
          description: "Authentication Error"
        404: 
          description: "Account not found"
        500:
         description: "Internal Server Error"





definitions:
  UserSignupRequest:
    title: User Signup Request
    type: object
    properties:
      email: 
        description: 'Email of the user'
        type: "string"
      firstName:
        description: "First name of the user"
        type: "string"
      lastName:
        description: "Last name of the user"
        type: "string"
      password:
        description: "Password of the user"
        type: "string"
      confirmPassword:
        description: "User password confirmatiion" 
        type: "string"
    example:
      email: 'user@user.com'
      firstName: "Marky"  
      lastName: "Steve"
      password: 'Banka2019'
      confirmPassword: 'Banka2019'

  UserLoginRequest:
    title: User Login Request
    type: object
    properties:
      email: 
        description: 'Email of the user'
        type: "string"
      password:
        description: "Password of the user"
        type: "string"
    example:
      email: 'user@user.com'
      password: 'Banka2019'

  createAccountRequest:
    title: Create Account Request
    type: object
    properties:
      type: "string"
    example:
      type: 'savings'
    
  createUsersRole:
    title: 'create Admin/Staff Request'
    type: 'object'
    properties:
      email: 
        description: 'Email of the user'
        type: "string"
      firstName:
        description: "First name of the user"
        type: "string"
      lastName:
        description: "Last name of the user"
        type: "string"
      role: 
        description: 'Uers role. 0 - Staff, 1 - Admin'
        type: 'string'
    example:
      email: 'admin1@banka.com'
      firstName: "Steve"  
      lastName: "Stone"
      role: '0'

  updateAccountStatus:
    title: Change account status
    type: object
    properties:
      type: "string"
    example:
      status: 'active'

  debitAccount:   
    title: Debit Account
    type: object
    properties:
      type: "integer"
    example:
      amount: '500'
    
  creditAccount:
    title: "Credit Account"
    type: "object"
    properties:
      type: "integer"
    example:
      amount: '500'

  resetPassword:
    title: 'Password Reset Request'
    type: 'object'
    properties:
      password: 
        description: 'Current User Password'
        type: "string"
      newPassword:
        description: "New User Password"
        type: "string"
      confirmNewPassword:
        description: "New User Password Confirmation"
        type: "string"
    example:
      password: 'Banka007'
      newPassword: 'Andela2019'
      confirmNewPassword: "Andela2019"

     
